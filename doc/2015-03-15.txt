At my current estimate, this will take 150 hours to run to completion
on my desktop machine.  And it seems to only use a quarter of the
total CPU capacity while running, since switching to using pmap, which
is twice what it used before switching to pmap (it also uses all eight
cores more evenly, spending less time juggling between them).

Conclusions:
 - I need to step-up the utilization
 - I need to make this checkpoint itself, so that it can be interrupted and pick-up again where it left off

Later that same day (after temporarily converting all maps to pmaps)...

[pdelong@localhost tumbler-puzzle]$ /usr/bin/time ~/Stuff/bin/lein run
((1 + 2 = 3 + 3 - 3) (4 - 1 = 1 * 2 + 1) (3 / 3 = 2 - 4 / 4) (2 * 4 = 4 / 1 * 2))
((1 + 2 * 4 / 4 = 3) (4 - 1 - 3 + 1 = 1) (3 / 3 + 1 * 3 = 4) (2 * 4 / 2 - 2 = 2))
^C6.10user 2.19system 2:29:38elapsed 0%CPU (0avgtext+0avgdata 119504maxresident)k
7136inputs+8outputs (9major+29216minor)pagefaults 0swaps
[pdelong@localhost tumbler-puzzle]$ 

After reverting all but one pmap...

tumbler-puzzle.core=> (dorun
                 #_=>    (map
                 #_=>      #(time (dorun (map println (try-arrangements (take % (produce-all-valid-arrangements))))))
                 #_=>      '(100 1000 10000 100000)  )  )
"Elapsed time: 75.986266 msecs"
"Elapsed time: 394.571287 msecs"
"Elapsed time: 5934.739606 msecs"
"Elapsed time: 471803.211518 msecs"
nil
tumbler-puzzle.core=> 
